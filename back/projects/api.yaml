openapi: 3.0.3
info:
  title: Projects Service API
  description: API for managing projects
  version: 1.0.0

servers:
  - url: http://localhost

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Use JWT token obtained from Auth Service

  parameters:
    skillFilter:
      name: skill
      in: query
      description: Filter projects by skill/skills
      schema:
        type: array
        items:
          type: string
      style: form
      explode: true

    roleFilter:
      name: role
      in: query
      description: Filter projects by role/roles
      schema:
        type: array
        items:
          type: string
      style: form
      explode: true

    courseNameFilter:
      name: course_name
      in: query
      description: Filter projects by course
      schema:
        type: array
        items:
          type: string
      style: form
      explode: true

    page:
      name: page
      in: query
      description: Page Number
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1

    pageSize:
      name: page_size
      in: query
      description: The number of elements on the page
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

    projectID:
      name: id
      in: path
      description: ID of the project
      required: true
      schema:
        type: integer

  schemas:
    BaseResponse:
      type: object
      properties:
        error:
          type: object
          nullable: true
          properties:
            code:
              type: string
            text:
              type: string
        success:
          type: boolean
    
    ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              nullable: true

    SkillListResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Skill'
            success:
              type: boolean
            error:
              type: object
              nullable: true

    RoleListResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Role'
            success:
              type: boolean
            error:
              type: object
              nullable: true

    ProjectResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Project'

    ProjectListResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Project'

    ProjectCreateRequest:
      type: object
      required:
        - course_name
        - team_lead_id
        - description
        - status
        - skills
        - roles
      properties:
        course_name:
          type: string
        team_lead_id:
          type: integer
        description:
          type: string
        project_link:
          type: string
          nullable: true
        status:
          type: string
          enum: [draft, open, in_progress, complete]
        skills:
          type: array
          items:
            type: string
          minItems: 1
        roles:
          type: array
          items:
            type: string
          minItems: 1

    ProjectUpdateRequest:
        type: object
        properties:
          course_name:
            type: string
          team_lead_id:
            type: integer
          description:
            type: string
          project_link:
            type: string
            nullable: true
          status:
            type: string
            enum: [draft, open, in_progress, complete]
          skills:
            type: array
            items:
              type: string
            minItems: 1
          roles:
            type: array
            items:
              type: string
            minItems: 1

    Project:
      type: object
      properties:
        id:
          type: integer
        course_name:
          type: string
        team_lead_id:
          type: integer
        description:
          type: string
        project_link:
          type: string
          nullable: true
        status:
          type: string
          enum: [draft, open, in_progress, complete]
        skills:
          type: array
          items:
            type: string
          minItems: 1
        roles:
          type: array
          items:
            type: string
          minItems: 1

    Skill:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
          nullable: true

    Role:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
          nullable: true

security:
  - bearerAuth: []

paths:
  /skills:
    get:
      tags: [Skills]
      summary: Get available skills
      responses:
        '200':
          description: List of available skills
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkillListResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
  /roles:
    get:
      tags: [Roles]
      summary: Get available roles
      responses:
        '200':
          description: List of available roles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleListResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /projects:
    get:
      tags: [Projects]
      summary: Get list of projects
      parameters:
        - $ref: '#/components/parameters/skillFilter'
        - $ref: '#/components/parameters/roleFilter'
        - $ref: '#/components/parameters/courseNameFilter'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: Projects retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectListResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags: [Projects]
      summary: Create a new project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreateRequest'
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /projects/{id}:
    put:
      tags: [Projects]
      summary: Update project by id
      parameters:
        - $ref: '#/components/parameters/projectID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdateRequest'
      responses:
        '200':
          description: Project updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags: [Projects]
      summary: Delete project by id
      parameters:
        - $ref: '#/components/parameters/projectID'
      responses:
        '200':
          description: Project deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
